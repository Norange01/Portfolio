---
import ProjectTile from "../layouts/ProjectTile.astro";
import Checkbox from "../components/Checkbox.astro";
import ClearIcon from "../icons/ClearIcon.astro";
import '../styles/global.css';
import LabeledSeparator from "../layouts/LabeledSeparator.astro";
import Tag from "../layouts/Tag.astro";
const files = Object.values(import.meta.glob("../projects/*.md", {eager: true}))

const allSkills = new Set();
const allTypes = new Set();

files.forEach(file => {
  const skills = file.frontmatter.skills || [];
  skills.forEach(skill => allSkills.add(skill));

  const type = file.frontmatter.type || [];
  allTypes.add(type);
});

const allSkillsArr = Array.from(allSkills);
const allTypesArr = Array.from(allTypes);

---
<h1 id="projects-header">Projects</h1>
<div class="sidebar">
    <aside class="sidebar__sidebar">
        <h2 style="text-align: center">Filters</h2>
        <div class="filters" id="filters">
            <div class="skills-filter">
                <LabeledSeparator>SKILLS:</LabeledSeparator>
                {allSkillsArr.map((skill:any)=><Checkbox text={skill}/>)}
            </div>
            <div class="types-filter" style="margin-top: 100px;">
                <LabeledSeparator>TYPES:</LabeledSeparator>
                {allTypesArr.map((type:any)=><Checkbox text={type}/>)}
            </div>
            <div class="separator">
                <div class="separator__separator"></div>
            </div>
            <button class="highlightable-button" id="clear-all-filters-button" style="border:none; font-size:16px;margin-top:100px">
                <ClearIcon/> CLEAR ALL FILTERS
            </button>
            
        </div>
    </aside>
    <div class="masonry-grid sidebar__main">
        {files.map(
            (proj:any) => 
                <div class={"masonry-grid__item disappear "+proj.frontmatter.type.toLowerCase().replace(/\s+/g, '-').replace(/[^\w-]/g, '')+ proj.frontmatter.skills.map((skill:string)=>(" "+skill.toLowerCase().replace(/\s+/g, '-').replace(/[^\w-]/g, ''))).join('')}>
                    <ProjectTile 
                        title={proj.frontmatter.title} 
                        type={proj.frontmatter.type} 
                        affiliation={proj.frontmatter.affiliation}
                        videoLink={proj.frontmatter.videoLink}
                        githubLink={proj.frontmatter.github}
                        tags={proj.frontmatter.skills}
                        images={proj.frontmatter.images}
                        imageHeight={proj.frontmatter.imageHeight}>{proj.frontmatter.description}</ProjectTile>
                        
                </div> 
        )}
    </div>
</div>
<style>
    .masonry-grid {
    column-count: 1;
    column-gap: 0.5rem;
    margin: 20px;
    }

    .masonry-grid__item {
        break-inside: avoid;
        margin-bottom: 0.5rem;
        outline: 2px outset var(--color4Light);
    }

    .sidebar {
        display: flex;
    }

    .sidebar__sidebar {
        width: 200px;
        outline: 2px outset var(--color4Light);
        margin: 20px 0px 20px 20px;
        padding: 15px 10px 10px 10px;
    }

    .sidebar__main {
        /* Take the remaining width */
        flex: 1;

        /* Make it scrollable */
        /*overflow: auto;*/
    }

    .filters{
        padding: 5%;
    }

    .hidden{
        display:none;
    }

    @media (min-width: 750px) {
        .masonry-grid {
            column-count: 2;
        }
        .sidebar__sidebar {
            width: 25%;
        }
    }

    @media (min-width: 1400px) {
        .masonry-grid {
            column-count: 3;
        }
        .sidebar__sidebar {
            width: 20%;
        }
    }

</style>
<script>
    let filtersDiv = document.getElementById("filters");
    let allProjects = document.getElementsByClassName("masonry-grid__item");
    //let selectedCheckboxes = document.getElementsByClassName("custom-checkbox-button__checkbox--selected");
    let clearButton = document.getElementById("clear-all-filters-button");


    filtersDiv?.addEventListener("mousedown", applyFilters);
    clearButton?.addEventListener("mousedown", resetFilters);

    showAll();

    function showAll(){
        for(let i=0; i<allProjects.length; i++){
            allProjects[i].classList.remove("hidden");
        }
    }

    function resetFilters(){
        let allCheckboxes =document.getElementsByClassName("custom-checkbox-button__checkbox");
        for(let i=0; i<allCheckboxes.length; i++){
            allCheckboxes[i].classList.remove("custom-checkbox-button__checkbox--selected");
        }
        showAll();
    }
    
    function applyFilters(){
        let selectedCheckboxes = document.getElementsByClassName("custom-checkbox-button__checkbox--selected");
        showAll();

        let checkboxLabels=[];
        for(let i=0; i<selectedCheckboxes.length; i++){
            let checkboxLabel = selectedCheckboxes[i].parentElement?.parentElement?.id.replace("-checkbox", "");
            checkboxLabels.push(checkboxLabel);
        }

        for(let i=0; i<allProjects.length; i++){
            if(checkboxLabels.every(CBLabel => allProjects[i].classList.contains(CBLabel))){
                allProjects[i].classList.remove("hidden");
            }
            else{
                allProjects[i].classList.add("hidden");
            }
            
        }


    }

    // Animations
    /*const projectsHeader = document.getElementById("projects-header");
    const cards = document.querySelectorAll('.masonry-grid__item');

    const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.target === projectsHeader && entry.isIntersecting) {
                cards.forEach((card, i) => {
                    setTimeout(() => {
                        card.classList.add('appear');
                    }, i * 100); // 50ms delay between each
                });

                observer.disconnect(); // optional: stop observing once done
            }
        });
    });
    observer.observe(projectsHeader);*/
</script>


